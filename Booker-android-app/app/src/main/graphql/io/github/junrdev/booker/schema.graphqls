enum BOOKING_TYPE {
  ONE_WAY

  ROUND_TRIP
}

type Booking {
  id: ID

  client: Client

  vehicle: Vehicle

  seats: [Seat!]

  isActive: Boolean

  bookingDate: String

  BOOKINGSTATUS: BookingStatus

  bookingType: BOOKING_TYPE

  paymentStatus: PAYMENT_STATUS
}

input BookingDto {
  clientId: String

  vehicleId: String

  seats: [SeatDto!]

  isActive: Boolean

  bookingDate: String

  BOOKINGSTATUS: BookingStatus

  bookingType: BOOKING_TYPE

  paymentStatus: PAYMENT_STATUS
}

enum BookingStatus {
  CONFIRMED

  PENDING

  CANCELLED

  COMPLETED
}

type Client {
  id: ID

  fullName: String

  identification: String

  email: String

  phone: String

  location: Location

  isActive: Boolean

  clientType: ClientType

  dateJoined: String

  kyc: Kyc

  county: County

  locationName: String

  subCounty: SubCounty
}

input ClientDto {
  fullName: String

  email: String

  phone: String

  location: LocationDto

  clientType: ClientType

  subCounty: String

  county: String
}

enum ClientType {
  STAFF

  USER
}

type Company {
  id: ID

  fullName: String

  email: String

  phone: String

  dateJoined: String

  images: [String]

  isActive: Boolean

  locationArea: String

  location: Location

  subCountyName: String

  countyName: String
}

input CompanyDto {
  fullName: String!

  email: String!

  phone: String!

  location: LocationDto

  images: [String]

  locationArea: String

  subCountyName: String

  countyName: String
}

type County {
  countyNumber: Int

  countyName: String
}

type Kyc {
  identificationNumber: String

  uploadedFormLink: String
}

type Location {
  latitude: Float

  longitude: Float
}

input LocationDto {
  latitude: Float

  longitude: Float
}

"""
 mutations
"""
type Mutation {
  """
   client
  """
  addClient(dto: ClientDto!): Client

  """
  company
  """
  createCompany(dto: CompanyDto!): Company!

  deleteCompany(id: String): Boolean

  """
  schedules
  """
  saveSchedule(dto: ScheduleDto!): Schedule

  deleteSchedule(id: ID): Boolean

  """
  routes
  """
  saveRoute(dto: RouteDto!): Route

  deleteRoute(id: ID!): Boolean

  """
  vehicles
  """
  saveVehicle(dto: VehicleDto!): Vehicle

  updateVehicle(id: ID!, dto: VehicleDto): Vehicle

  deleteVehicle(id: ID!): Boolean

  """
  bookings
  """
  saveBooking(dto: BookingDto!): Booking

  cancelBooking(bookingId: String!): Booking

  deleteBooking(bookingId: String!): Boolean
}

enum PAYMENT_STATUS {
  INCOMPLETE

  PENDING

  COMPLETE
}

"""
 query definitions
"""
type Query {
  """
   companies
  """
  getCompanies: [Company!]

  getCompanyById(id: ID!): Company!

  """
   clients
  """
  getAllClients: [Client!]

  getClientById(id: ID!): Client!

  """
  routes
  """
  getAllRoutes: [Route!]

  getRouteById(id: ID!): Route!

  getCountyRoutes(countyName: String!): [Booking]

  getSubCountyRoutes(subCountyName: String!): [Booking]

  getRegionRoutes(countyName: String!, subCountyName: String!): [Booking]

  """
  schedule
  """
  getAllSchedules: [Schedule!]

  getScheduleById(id: ID!): Schedule!

  """
  vehicles
  """
  getVehicleById(id: ID!): Vehicle!

  getAllVehicles: [Vehicle!]

  getVehiclesByRoute(routeId: String!): [Vehicle]

  """
  bookings
  """
  getBookingById(id: ID!): Booking!

  getAllBookings: [Booking!]

  getClientBookings(clientId: ID!): [Booking!]

  getVehicleBookings(vehicleId: ID!): [Booking!]

  """
  locations
  """
  getCounties: [County!]

  getSubCounties: [SubCounty!]

  getSubCountiesByCountyNumber(countyNumber: Int!): [SubCounty!]

  getSubCountiesByCountyName(countyName: String!): [SubCounty!]
}

type Route {
  id: ID

  fromLocation: Location

  toLocation: Location

  fromLocationName: String

  toLocationName: String

  vehicles: [Vehicle]

  fromLocationCountySubCounty: UnifiedLocationCountySubCounty

  toLocationCountySubCounty: UnifiedLocationCountySubCounty

  schedule: Schedule
}

input RouteDto {
  scheduleId: String!

  fromLocation: LocationDto

  toLocation: LocationDto

  fromLocationName: String

  toLocationName: String

  fromSubCountyName: String

  fromCountyName: String

  toSubCountyName: String

  toCountyName: String
}

type Schedule {
  id: ID

  routes: [Route]

  phone: String

  company: Company
}

input ScheduleDto {
  routes: [RouteDto]

  phone: String

  scheduleId: String

  companyId: String
}

type Seat {
  seatNo: String

  isOccupied: Boolean
}

input SeatDto {
  seatNo: String

  isOccupied: Boolean
}

type SubCounty {
  countyNumber: Int

  subCountyName: String
}

type UnifiedLocationCountySubCounty {
  county: County!

  subCounty: SubCounty!
}

type Vehicle {
  vehicleId: ID

  route: Route

  seats: [Seat]

  seatCount: Int

  price: Float

  discount: Float

  leavingTime: String

  vehicleName: String

  additionalInfo: [String!]

  timeOfTravel: Float

  updateslug: Float
}

input VehicleDto {
  vehicleName: String

  routeId: String

  seats: [SeatDto]

  seatCount: Int

  price: Float

  discount: Float

  leavingTime: String

  additionalInfo: [String!]
}

type __Directive {
  """
  The __Directive type represents a Directive that a server supports.
  """
  name: String!

  description: String

  isRepeatable: Boolean!

  locations: [__DirectiveLocation!]!

  args(includeDeprecated: Boolean = false): [__InputValue!]!
}

"""
An enum describing valid locations where a directive can be placed
"""
enum __DirectiveLocation {
  """
  Indicates the directive is valid on queries.
  """
  QUERY

  """
  Indicates the directive is valid on mutations.
  """
  MUTATION

  """
  Indicates the directive is valid on subscriptions.
  """
  SUBSCRIPTION

  """
  Indicates the directive is valid on fields.
  """
  FIELD

  """
  Indicates the directive is valid on fragment definitions.
  """
  FRAGMENT_DEFINITION

  """
  Indicates the directive is valid on fragment spreads.
  """
  FRAGMENT_SPREAD

  """
  Indicates the directive is valid on inline fragments.
  """
  INLINE_FRAGMENT

  """
  Indicates the directive is valid on variable definitions.
  """
  VARIABLE_DEFINITION

  """
  Indicates the directive is valid on a schema SDL definition.
  """
  SCHEMA

  """
  Indicates the directive is valid on a scalar SDL definition.
  """
  SCALAR

  """
  Indicates the directive is valid on an object SDL definition.
  """
  OBJECT

  """
  Indicates the directive is valid on a field SDL definition.
  """
  FIELD_DEFINITION

  """
  Indicates the directive is valid on a field argument SDL definition.
  """
  ARGUMENT_DEFINITION

  """
  Indicates the directive is valid on an interface SDL definition.
  """
  INTERFACE

  """
  Indicates the directive is valid on an union SDL definition.
  """
  UNION

  """
  Indicates the directive is valid on an enum SDL definition.
  """
  ENUM

  """
  Indicates the directive is valid on an enum value SDL definition.
  """
  ENUM_VALUE

  """
  Indicates the directive is valid on an input object SDL definition.
  """
  INPUT_OBJECT

  """
  Indicates the directive is valid on an input object field SDL definition.
  """
  INPUT_FIELD_DEFINITION
}

type __EnumValue {
  name: String!

  description: String

  isDeprecated: Boolean!

  deprecationReason: String
}

type __Field {
  name: String!

  description: String

  args(includeDeprecated: Boolean = false): [__InputValue!]!

  type: __Type!

  isDeprecated: Boolean!

  deprecationReason: String
}

type __InputValue {
  name: String!

  description: String

  type: __Type!

  defaultValue: String

  isDeprecated: Boolean

  deprecationReason: String
}

"""
A GraphQL Introspection defines the capabilities of a GraphQL server. It exposes all available types and directives on the server, the entry points for query, mutation, and subscription operations.
"""
type __Schema {
  description: String

  """
  A list of all types supported by this server.
  """
  types: [__Type!]!

  """
  The type that query operations will be rooted at.
  """
  queryType: __Type!

  """
  If this server supports mutation, the type that mutation operations will be rooted at.
  """
  mutationType: __Type

  """
  'A list of all directives supported by this server.
  """
  directives: [__Directive!]!

  """
  'If this server support subscription, the type that subscription operations will be rooted at.
  """
  subscriptionType: __Type
}

type __Type {
  kind: __TypeKind!

  name: String

  description: String

  fields(includeDeprecated: Boolean = false): [__Field!]

  interfaces: [__Type!]

  possibleTypes: [__Type!]

  enumValues(includeDeprecated: Boolean = false): [__EnumValue!]

  inputFields(includeDeprecated: Boolean = false): [__InputValue!]

  ofType: __Type

  """
  This field is considered experimental because it has not yet been ratified in the graphql specification
  """
  isOneOf: Boolean

  specifiedByURL: String

  specifiedByUrl: String @deprecated(reason: "This legacy name has been replaced by `specifiedByURL`")
}

"""
An enum describing what kind of type a given __Type is
"""
enum __TypeKind {
  """
  Indicates this type is a scalar. 'specifiedByURL' is a valid field
  """
  SCALAR

  """
  Indicates this type is an object. `fields` and `interfaces` are valid fields.
  """
  OBJECT

  """
  Indicates this type is an interface. `fields` and `possibleTypes` are valid fields.
  """
  INTERFACE

  """
  Indicates this type is a union. `possibleTypes` is a valid field.
  """
  UNION

  """
  Indicates this type is an enum. `enumValues` is a valid field.
  """
  ENUM

  """
  Indicates this type is an input object. `inputFields` is a valid field.
  """
  INPUT_OBJECT

  """
  Indicates this type is a list. `ofType` is a valid field.
  """
  LIST

  """
  Indicates this type is a non-null. `ofType` is a valid field.
  """
  NON_NULL
}

"""
Directs the executor to include this field or fragment only when the `if` argument is true
"""
directive @include ("Included when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

"""
Directs the executor to skip this field or fragment when the `if` argument is true.
"""
directive @skip ("Skipped when true." if: Boolean!) on FIELD|FRAGMENT_SPREAD|INLINE_FRAGMENT

"""
Marks the field, argument, input field or enum value as deprecated
"""
directive @deprecated ("The reason for the deprecation" reason: String = "No longer supported") on FIELD_DEFINITION|ARGUMENT_DEFINITION|ENUM_VALUE|INPUT_FIELD_DEFINITION

"""
Exposes a URL that specifies the behaviour of this scalar.
"""
directive @specifiedBy ("The URL that specifies the behaviour of this scalar." url: String!) on SCALAR

"""
Indicates an Input Object is a OneOf Input Object.
"""
directive @oneOf on INPUT_OBJECT

schema {
  query: Query
  mutation: Mutation
}
